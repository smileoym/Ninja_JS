/*создайте объект и напишите цикл вывода всех его свойств в виде "ключ: значение" */

/*выводит ключ*/
var person = {
    firstName : 'John',
    lastName  : 'Doe',
    age       : 50,
    eyeColor  : 'blue'
};

for (var property in person){
    alert(property);

/*выводит значение*/
var person = {
    firstName : 'John',
    lastName  : 'Doe',
    age       : 50,
    eyeColor  : 'blue'
};

for (var property in person){
    alert(person[property]);
}
/*выводит ключ и значение*/
var person = {
    firstName : 'John',
    lastName  : 'Doe',
    age       : 50,
    eyeColor  : 'blue'
};

for (var property in person){
    alert(property+':'+person[property]);
}
/*напишите функцию конкатенации 2х строк с обязательным приведением к строке 
(concat(2,3) должно выводить "23", concat(false, 9) -> "false9" итд.) */
/*напишите функцию конкатенации 2х строк с обязательным приведением к строке 
(concat(2,3) должно выводить "23", concat(false, 9) -> "false9" итд.) */

function sum(a, b){
 	var str1 = String(a);
 	var str2 = String(b);
 		return '"' + str1 + str2 + '"';
}
	console.log(sum('false', 9))

function sum(a, b){
  	return '"' + String(a) + String(b) + '"';
}
	console.log(sum('false', 9))

/*напишите функцию вычисления площади прямоугольника по длине 2х сторон так, чтобы если передан 
1 аргумент возвращалась площадь квадрата*/

function areaRectan(a, b) {
   	if (arguments.length > 1) {
 	  var result = a * b; 
      }else{
 	  var result = a * a; 
  }
  return result;
}
areaRectan();
/*напишите функцию, получающую произвольное количество аргументов и проверяющую есть ли 
среди них отрицательные числа. Если есть, то возвращать false, иначе true. 
Если было передано не число, то возвращать undefined */

<script>
function arg() {
	var result = 0;
	var count = 1;
   	for (var i = 0; i < arguments.length; i++) {
   		if (typeof arguments[i] != 'number') {
   			result = undefined;
   			break;
   		}
   		else if (arguments[i] > 0 && count != 0) 
   			result = true; 
   		else {
   			result = false; 
   			count = 0;
   		} 
   	}
   	return result;
   }
   arg('test');
</script> 

/* напишите функцию, получающую произвольное количество аргументов - массивов и объединяющую 
их в один массив. В функции должна быть проверка на тип аргумента и если это не массив, то переходить 
с следующему аргументу */
</script>
function args() {
	var result = [];
	for (var i = 0; i < arguments.length; i++) {
		if (typeof arguments[i] == 'object') {
			result = result.concat(arguments[i]);
		}
	}
	return result;
}
var arr1 = ['Yurii', 9, 'test'];
var arr2 = ['Yurii', 9, 'test'];
args(arr1, arr2);
</script>

/*напишите функцию возведения в степень, не используя рекурсию */
	
function foo(num, exp) {
	var result = num;
	for(var i = 0; i < exp-1; i++){
		result *=  num;
	}
	return result;
}
	foo(2, 10);

/*напишите рекурсивную функцию суммирующую все элементы переданного массива */
var arr1 = [2,11,7,3,14];
function foo(arr){
	var result = 0;
	var count = 0;
	function foo1(arr){
		if(arr.length != count) {
			result += arr[count];
			count += 1;
			console.log(result);
			return foo1(arr);
		}
	}
	return foo1(arr1);
};
foo(arr1);

/*напишите функцию вывода всех свойств объекта в виде "ключ: значение" с учетом вложенных объектов 
Пример объекта: 
*/
var user = { 
	name: 'andrey', 
	login: '111', 
	password: '222', 
	address: { 
		city: 'Krasnodar', 
			house: { 
				flat: 99, 
				floor: 4 
			} 
		} 
	}

function foo(arr){
	var count = 0;
	var obj = arr;
	if(typeof obj == 'object'){
		function foo1(obj){
			for(var i in obj) {
				if (typeof obj[i] == 'object') {
					obj = obj[i];
					foo1(obj);
				} else console.log(i + ':' + obj[i]);
			}

		}
	return foo1(obj);
	}
}
foo(user);

/*напишите рекурсивную функцию вывода чисел фибоначчи в консоль. аругментом функции должно быть 
значение сколько чисел выводить*/

function fib(num){
	var result1 = 0;
	var result2 = 1;
	var count = 0;
	function fib1(){
		if(count != num){
			console.log(result2);
			var result3 = result1 + result2;
			result1 = result2;
			result2 = result3;
			count++;
			return fib1();
		}
	}
	 return fib1();
}
fib(234);

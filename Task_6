 /*Task 6*/
/*перепишите функцию добавления товаров в корзину так, чтобы после добавления товара 
происходило сохранение всего массива товаров в Local Storage в переменную cart.
напишите самовызывающийся метод корзины который проверял бы есть ли сохраненные 
товары в Local Storage. Если есть то нужно заполнить массив продуктов экземплярами 
класса Product с количеством. Парсинг строки из Local Storage должен быть в конструкции 
try cache*/
<script>
var Cart = function() {
	var products = [];

	this.getProduct = function (index) {
		return products[index].obj;
	};

	this.addProduct = function (product, count) {
		if(!validateProduct(product)) {
			console.error('Wrong product');
		};
		count = count || 1;
		var item = getProductByName(product.name);		
		if(item) {
			item.count += count;
		} else {
			products.push({
				obj: product,
				count: 1
			});
		}
		localStorage.setItem('cart', JSON.stringify(products));
	};

	this.getProductPrice = function(productName) {
		var item = getProductByName(productName);		
		var discount = getDiscount(item) / item.count;
		return item.obj.price - discount;
	};

	this.getProductSum = function(productName) {
		if(productName) {
			var item = getProductByName(productName);
			return this.getProductPrice(productName) * item.count;	
		} else {
			var fullSum = 0;
			for(var i =0; i<products.length; i++) {
				fullSum += this.getProductPrice(products[i].obj.name) *products[i].count;
			};
			return fullSum;
		}
	};

	this.getProductDiscount = function (productName) {
		if(productName) {
			//возвращаем скидку по одному товару
			var item = getProductByName(productName);
			return getDiscount(item);
		} else {
			//возвращаем скидку по всей корзине
			var fullDiscount = 0;
			for(var i = 0; i < products.length; i++) {
				fullDiscount += getDiscount(products[i]);
			}
			return fullDiscount
		}
	};

	function getDiscount(item) {
		var count = item.count;
		if(count > 5) {
			return item.obj.price * 10 / 100 * count;
		} else if(count > 3) {
			return item.obj.price * 5 / 100 * count;
		} else {
			return 0;
		}
	};

	function getProductByName(productName) {
		for(var i = 0; i < products.length; i++) {
			if(products[i].obj.name == productName) {
				return products[i];
			}
		}
	};

	function validateProduct(product) {
		return product.name != undefined && product.price != undefined;
			
	};
};

function Product() {

};

Product.createEmpty = function() {
	var product = new Product;
	product.price = 100;
	product.name = 'Empty';
	return product; 
};

Product.createFromData = function(data) {
	var product = new Product;
	product.price = data.price;
	product.name = data.name;
	return product; 
};

function controlState() {	
	if(localStorage.getItem('cart'))
		var result = JSON.parse(localStorage.getItem('cart'));
	return result.length > 0? true: false;
};

function getMyInterval() {
	if(controlState()) {
		var carFromStorage = localStorage.getItem('cart');
		var parseCar = JSON.parse(carFromStorage);
		for(var i =0; i<parseCar.length; i++) {
			if(parseCar[i].obj) {
				var newProd = new Product;
				newProd.name =  parseCar[i].obj.name;
				newProd.price =  parseCar[i].obj.price;
				newProd.count =  parseCar[i].count;
				parseCar[i] = newProd;
			}
		}
	localStorage.setItem('cart', JSON.stringify(parseCar));	
	}
};	

var cart = new Cart;

cart.addProduct(Product.createEmpty());
cart.addProduct(Product.createEmpty());
cart.addProduct(Product.createEmpty());
cart.addProduct(Product.createEmpty());
cart.addProduct(Product.createFromData({name: 'tv', price: 800}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));
cart.addProduct(Product.createFromData({name: 'phone', price: 300}));

setInterval(getMyInterval, 500);
	</script>
